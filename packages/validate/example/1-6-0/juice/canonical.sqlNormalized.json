[
  "CREATE TABLE IF NOT EXISTS `Addresses` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `fullName` VARCHAR(?), `mobileNum` INTEGER, `zipCode` VARCHAR(?), `streetAddress` VARCHAR(?), `city` VARCHAR(?), `state` VARCHAR(?), `country` VARCHAR(?), `createdAt` DATETIME NOT ?, `updatedAt` DATETIME NOT ?, `UserId` INTEGER REFERENCES `Users` (`id`) ON DELETE SET ? ON UPDATE CASCADE);",
  "CREATE TABLE IF NOT EXISTS `BasketItems` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `quantity` INTEGER, `createdAt` DATETIME NOT ?, `updatedAt` DATETIME NOT ?, `BasketId` INTEGER REFERENCES `Baskets` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, `ProductId` INTEGER REFERENCES `Products` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, UNIQUE (`BasketId`, `ProductId`));",
  "CREATE TABLE IF NOT EXISTS `Baskets` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `coupon` VARCHAR(?), `createdAt` DATETIME NOT ?, `updatedAt` DATETIME NOT ?, `UserId` INTEGER REFERENCES `Users` (`id`) ON DELETE SET ? ON UPDATE CASCADE);",
  "CREATE TABLE IF NOT EXISTS `Captchas` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `captchaId` INTEGER, `captcha` VARCHAR(?), `answer` VARCHAR(?), `createdAt` DATETIME NOT ?, `updatedAt` DATETIME NOT ?);",
  "CREATE TABLE IF NOT EXISTS `Cards` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `fullName` VARCHAR(?), `cardNum` INTEGER, `expMonth` INTEGER, `expYear` INTEGER, `createdAt` DATETIME NOT ?, `updatedAt` DATETIME NOT ?, `UserId` INTEGER REFERENCES `Users` (`id`) ON DELETE SET ? ON UPDATE CASCADE);",
  "CREATE TABLE IF NOT EXISTS `Challenges` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `key` VARCHAR(?), `name` VARCHAR(?), `category` VARCHAR(?), `tags` VARCHAR(?), `description` VARCHAR(?), `difficulty` INTEGER, `hint` VARCHAR(?), `hintUrl` VARCHAR(?), `mitigationUrl` VARCHAR(?), `solved` TINYINT(?), `disabledEnv` VARCHAR(?), `tutorialOrder` NUMBER, `createdAt` DATETIME NOT ?, `updatedAt` DATETIME NOT ?);",
  "CREATE TABLE IF NOT EXISTS `Complaints` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `message` VARCHAR(?), `file` VARCHAR(?), `createdAt` DATETIME NOT ?, `updatedAt` DATETIME NOT ?, `UserId` INTEGER REFERENCES `Users` (`id`) ON DELETE SET ? ON UPDATE CASCADE);",
  "CREATE TABLE IF NOT EXISTS `Deliveries` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `name` VARCHAR(?), `price` FLOAT, `deluxePrice` FLOAT, `eta` FLOAT, `icon` VARCHAR(?), `createdAt` DATETIME NOT ?, `updatedAt` DATETIME NOT ?);",
  "CREATE TABLE IF NOT EXISTS `Feedbacks` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `comment` VARCHAR(?), `rating` INTEGER NOT ?, `createdAt` DATETIME NOT ?, `updatedAt` DATETIME NOT ?, `UserId` INTEGER REFERENCES `Users` (`id`) ON DELETE SET ? ON UPDATE CASCADE);",
  "CREATE TABLE IF NOT EXISTS `ImageCaptchas` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `image` VARCHAR(?), `answer` VARCHAR(?), `UserId` INTEGER REFERENCES `Users` (`id`) ON DELETE NO ACTION ON UPDATE CASCADE, `createdAt` DATETIME NOT ?, `updatedAt` DATETIME NOT ?);",
  "CREATE TABLE IF NOT EXISTS `Memories` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `caption` VARCHAR(?), `imagePath` VARCHAR(?), `createdAt` DATETIME NOT ?, `updatedAt` DATETIME NOT ?, `UserId` INTEGER REFERENCES `Users` (`id`) ON DELETE SET ? ON UPDATE CASCADE);",
  "CREATE TABLE IF NOT EXISTS `PrivacyRequests` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `UserId` INTEGER REFERENCES `Users` (`id`) ON DELETE NO ACTION ON UPDATE CASCADE, `deletionRequested` TINYINT(?) DEFAULT ?, `createdAt` DATETIME NOT ?, `updatedAt` DATETIME NOT ?);",
  "CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `name` VARCHAR(?), `description` VARCHAR(?), `price` DECIMAL, `deluxePrice` DECIMAL, `image` VARCHAR(?), `createdAt` DATETIME NOT ?, `updatedAt` DATETIME NOT ?, `deletedAt` DATETIME);",
  "CREATE TABLE IF NOT EXISTS `Quantities` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `quantity` INTEGER, `limitPerUser` INTEGER DEFAULT ?, `createdAt` DATETIME NOT ?, `updatedAt` DATETIME NOT ?, `ProductId` INTEGER REFERENCES `Products` (`id`) ON DELETE SET ? ON UPDATE CASCADE);",
  "CREATE TABLE IF NOT EXISTS `Recycles` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `quantity` INTEGER(?), `isPickup` TINYINT(?) DEFAULT ?, `date` DATETIME, `createdAt` DATETIME NOT ?, `updatedAt` DATETIME NOT ?, `UserId` INTEGER REFERENCES `Users` (`id`) ON DELETE SET ? ON UPDATE CASCADE, `AddressId` INTEGER REFERENCES `Addresses` (`id`) ON DELETE SET ? ON UPDATE CASCADE);",
  "CREATE TABLE IF NOT EXISTS `SecurityAnswers` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `answer` VARCHAR(?), `UserId` INTEGER UNIQUE REFERENCES `Users` (`id`) ON DELETE NO ACTION ON UPDATE CASCADE, `createdAt` DATETIME NOT ?, `updatedAt` DATETIME NOT ?, `SecurityQuestionId` INTEGER REFERENCES `SecurityQuestions` (`id`) ON DELETE SET ? ON UPDATE CASCADE);",
  "CREATE TABLE IF NOT EXISTS `SecurityQuestions` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `question` VARCHAR(?), `createdAt` DATETIME NOT ?, `updatedAt` DATETIME NOT ?);",
  "CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(?) DEFAULT ?, `email` VARCHAR(?) UNIQUE, `password` VARCHAR(?), `role` VARCHAR(?) DEFAULT ?, `deluxeToken` VARCHAR(?) DEFAULT ?, `lastLoginIp` VARCHAR(?) DEFAULT ?, `profileImage` VARCHAR(?) DEFAULT ?, `totpSecret` VARCHAR(?) DEFAULT ?, `isActive` TINYINT(?) DEFAULT ?, `createdAt` DATETIME NOT ?, `updatedAt` DATETIME NOT ?, `deletedAt` DATETIME);",
  "CREATE TABLE IF NOT EXISTS `Wallets` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `balance` INTEGER DEFAULT ?, `createdAt` DATETIME NOT ?, `updatedAt` DATETIME NOT ?, `UserId` INTEGER REFERENCES `Users` (`id`) ON DELETE SET ? ON UPDATE CASCADE);",
  "DROP TABLE IF EXISTS `Addresses`;",
  "DROP TABLE IF EXISTS `BasketItems`;",
  "DROP TABLE IF EXISTS `Baskets`;",
  "DROP TABLE IF EXISTS `Captchas`;",
  "DROP TABLE IF EXISTS `Cards`;",
  "DROP TABLE IF EXISTS `Challenges`;",
  "DROP TABLE IF EXISTS `Complaints`;",
  "DROP TABLE IF EXISTS `Deliveries`;",
  "DROP TABLE IF EXISTS `Feedbacks`;",
  "DROP TABLE IF EXISTS `ImageCaptchas`;",
  "DROP TABLE IF EXISTS `Memories`;",
  "DROP TABLE IF EXISTS `PrivacyRequests`;",
  "DROP TABLE IF EXISTS `Products`;",
  "DROP TABLE IF EXISTS `Quantities`;",
  "DROP TABLE IF EXISTS `Recycles`;",
  "DROP TABLE IF EXISTS `SecurityAnswers`;",
  "DROP TABLE IF EXISTS `SecurityQuestions`;",
  "DROP TABLE IF EXISTS `Users`;",
  "DROP TABLE IF EXISTS `Wallets`;",
  "INSERT INTO `Addresses` (`id`,`fullName`,`mobileNum`,`zipCode`,`streetAddress`,`city`,`state`,`country`,`createdAt`,`updatedAt`,`UserId`) VALUES (?,$?,$?,$?,$?,$?,$?,$?,$?,$?,$?);",
  "INSERT INTO `BasketItems` (`id`,`quantity`,`createdAt`,`updatedAt`,`BasketId`,`ProductId`) VALUES (?,$?,$?,$?,$?,$?);",
  "INSERT INTO `Baskets` (`id`,`createdAt`,`updatedAt`,`UserId`) VALUES (?,$?,$?,$?);",
  "INSERT INTO `Cards` (`id`,`fullName`,`cardNum`,`expMonth`,`expYear`,`createdAt`,`updatedAt`,`UserId`) VALUES (?,$?,$?,$?,$?,$?,$?,$?);",
  "INSERT INTO `Challenges` (`id`,`key`,`name`,`category`,`description`,`difficulty`,`hint`,`hintUrl`,`mitigationUrl`,`solved`,`disabledEnv`,`tutorialOrder`,`createdAt`,`updatedAt`) VALUES (?,$?,$?,$?,$?,$?,$?,$?,$?,$?,$?,$?,$?,$?);",
  "INSERT INTO `Challenges` (`id`,`key`,`name`,`category`,`tags`,`description`,`difficulty`,`hint`,`hintUrl`,`mitigationUrl`,`solved`,`disabledEnv`,`tutorialOrder`,`createdAt`,`updatedAt`) VALUES (?,$?,$?,$?,$?,$?,$?,$?,$?,$?,$?,$?,$?,$?,$?);",
  "INSERT INTO `Challenges` (`id`,`key`,`name`,`category`,`tags`,`description`,`difficulty`,`hint`,`solved`,`disabledEnv`,`tutorialOrder`,`createdAt`,`updatedAt`) VALUES (?,$?,$?,$?,$?,$?,$?,$?,$?,$?,$?,$?,$?);",
  "INSERT INTO `Complaints` (`id`,`message`,`createdAt`,`updatedAt`,`UserId`) VALUES (?,$?,$?,$?,$?);",
  "INSERT INTO `Deliveries` (`id`,`name`,`price`,`deluxePrice`,`eta`,`icon`,`createdAt`,`updatedAt`) VALUES (?,$?,$?,$?,$?,$?,$?,$?);",
  "INSERT INTO `Feedbacks` (`id`,`comment`,`rating`,`createdAt`,`updatedAt`,`UserId`) VALUES (?,$?,$?,$?,$?,$?);",
  "INSERT INTO `Memories` (`id`,`caption`,`imagePath`,`createdAt`,`updatedAt`,`UserId`) VALUES (?,$?,$?,$?,$?,$?);",
  "INSERT INTO `Products` (`id`,`name`,`description`,`price`,`deluxePrice`,`image`,`createdAt`,`updatedAt`) VALUES (?,$?,$?,$?,$?,$?,$?,$?);",
  "INSERT INTO `Products` (`id`,`name`,`description`,`price`,`deluxePrice`,`image`,`createdAt`,`updatedAt`,`deletedAt`) VALUES (?,$?,$?,$?,$?,$?,$?,$?,$?);",
  "INSERT INTO `Quantities` (`id`,`quantity`,`limitPerUser`,`createdAt`,`updatedAt`,`ProductId`) VALUES (?,$?,$?,$?,$?,$?);",
  "INSERT INTO `Recycles` (`id`,`quantity`,`isPickup`,`date`,`createdAt`,`updatedAt`,`UserId`,`AddressId`) VALUES (?,$?,$?,$?,$?,$?,$?,$?);",
  "INSERT INTO `SecurityAnswers` (`id`,`answer`,`UserId`,`createdAt`,`updatedAt`,`SecurityQuestionId`) VALUES (?,$?,$?,$?,$?,$?);",
  "INSERT INTO `SecurityQuestions` (`id`,`question`,`createdAt`,`updatedAt`) VALUES (?,$?,$?,$?);",
  "INSERT INTO `Users` (`id`,`username`,`email`,`password`,`role`,`deluxeToken`,`lastLoginIp`,`profileImage`,`totpSecret`,`isActive`,`createdAt`,`updatedAt`) VALUES (?,$?,$?,$?,$?,$?,$?,$?,$?,$?,$?,$?);",
  "INSERT INTO `Wallets` (`id`,`balance`,`createdAt`,`updatedAt`,`UserId`) VALUES (?,$?,$?,$?,$?);",
  "PRAGMA FOREIGN_KEYS=ON",
  "PRAGMA INDEX_INFO(`sqlite_autoindex_BasketItems_1`)",
  "PRAGMA INDEX_INFO(`sqlite_autoindex_SecurityAnswers_1`)",
  "PRAGMA INDEX_INFO(`sqlite_autoindex_Users_1`)",
  "PRAGMA INDEX_LIST(`Addresses`)",
  "PRAGMA INDEX_LIST(`BasketItems`)",
  "PRAGMA INDEX_LIST(`Baskets`)",
  "PRAGMA INDEX_LIST(`Captchas`)",
  "PRAGMA INDEX_LIST(`Cards`)",
  "PRAGMA INDEX_LIST(`Challenges`)",
  "PRAGMA INDEX_LIST(`Complaints`)",
  "PRAGMA INDEX_LIST(`Deliveries`)",
  "PRAGMA INDEX_LIST(`Feedbacks`)",
  "PRAGMA INDEX_LIST(`ImageCaptchas`)",
  "PRAGMA INDEX_LIST(`Memories`)",
  "PRAGMA INDEX_LIST(`PrivacyRequests`)",
  "PRAGMA INDEX_LIST(`Products`)",
  "PRAGMA INDEX_LIST(`Quantities`)",
  "PRAGMA INDEX_LIST(`Recycles`)",
  "PRAGMA INDEX_LIST(`SecurityAnswers`)",
  "PRAGMA INDEX_LIST(`SecurityQuestions`)",
  "PRAGMA INDEX_LIST(`Users`)",
  "PRAGMA INDEX_LIST(`Wallets`)",
  "PRAGMA KEY=?",
  "PRAGMA table_info(`Challenges`)",
  "PRAGMA table_info(`Complaints`)",
  "PRAGMA table_info(`Feedbacks`)",
  "PRAGMA table_info(`Products`)",
  "PRAGMA table_info(`Quantities`)",
  "PRAGMA table_info(`Users`)",
  "SELECT * FROM Products WHERE ((name LIKE ? OR description LIKE ?) AND deletedAt IS ?) ORDER BY name",
  "SELECT * FROM Users WHERE email = ? AND password = ? AND deletedAt IS ?",
  "SELECT `id`, `comment`, `rating`, `createdAt`, `updatedAt`, `UserId` FROM `Feedbacks` AS `Feedback` WHERE ((`Feedback`.`comment` LIKE ? AND `Feedback`.`comment` LIKE ?) OR (`Feedback`.`comment` LIKE ? AND `Feedback`.`comment` LIKE ?));",
  "SELECT `id`, `comment`, `rating`, `createdAt`, `updatedAt`, `UserId` FROM `Feedbacks` AS `Feedback` WHERE (`Feedback`.`comment` LIKE ? AND `Feedback`.`comment` LIKE ?);",
  "SELECT `id`, `comment`, `rating`, `createdAt`, `updatedAt`, `UserId` FROM `Feedbacks` AS `Feedback` WHERE (`Feedback`.`comment` LIKE ? OR `Feedback`.`comment` LIKE ? OR `Feedback`.`comment` LIKE ? OR `Feedback`.`comment` LIKE ? OR `Feedback`.`comment` LIKE ?);",
  "SELECT `id`, `comment`, `rating`, `createdAt`, `updatedAt`, `UserId` FROM `Feedbacks` AS `Feedback` WHERE (`Feedback`.`comment` LIKE ? OR `Feedback`.`comment` LIKE ?);",
  "SELECT `id`, `comment`, `rating`, `createdAt`, `updatedAt`, `UserId` FROM `Feedbacks` AS `Feedback` WHERE `Feedback`.`comment` LIKE ?;",
  "SELECT `id`, `comment`, `rating`, `createdAt`, `updatedAt`, `UserId` FROM `Feedbacks` AS `Feedback` WHERE `Feedback`.`rating` = ?;",
  "SELECT `id`, `key`, `name`, `category`, `tags`, `description`, `difficulty`, `hint`, `hintUrl`, `mitigationUrl`, `solved`, `disabledEnv`, `tutorialOrder`, `createdAt`, `updatedAt` FROM `Challenges` AS `Challenge` WHERE `Challenge`.`name` = ? LIMIT ?, ?;",
  "SELECT `id`, `message`, `file`, `createdAt`, `updatedAt`, `UserId` FROM `Complaints` AS `Complaint` WHERE ((`Complaint`.`message` LIKE ? AND `Complaint`.`message` LIKE ?) OR (`Complaint`.`message` LIKE ? AND `Complaint`.`message` LIKE ?));",
  "SELECT `id`, `message`, `file`, `createdAt`, `updatedAt`, `UserId` FROM `Complaints` AS `Complaint` WHERE (`Complaint`.`message` LIKE ? AND `Complaint`.`message` LIKE ?);",
  "SELECT `id`, `message`, `file`, `createdAt`, `updatedAt`, `UserId` FROM `Complaints` AS `Complaint` WHERE (`Complaint`.`message` LIKE ? OR `Complaint`.`message` LIKE ? OR `Complaint`.`message` LIKE ? OR `Complaint`.`message` LIKE ? OR `Complaint`.`message` LIKE ?);",
  "SELECT `id`, `message`, `file`, `createdAt`, `updatedAt`, `UserId` FROM `Complaints` AS `Complaint` WHERE (`Complaint`.`message` LIKE ? OR `Complaint`.`message` LIKE ?);",
  "SELECT `id`, `message`, `file`, `createdAt`, `updatedAt`, `UserId` FROM `Complaints` AS `Complaint` WHERE `Complaint`.`message` LIKE ?;",
  "SELECT `id`, `name`, `description`, `price`, `deluxePrice`, `image`, `createdAt`, `updatedAt`, `deletedAt` FROM `Products` AS `Product` WHERE (`Product`.`deletedAt` IS ? AND `Product`.`id` = ?);",
  "SELECT `id`, `quantity`, `limitPerUser`, `createdAt`, `updatedAt`, `ProductId` FROM `Quantities` AS `Quantity` LIMIT ?, ?;",
  "SELECT `id`, `username`, `email`, `password`, `role`, `deluxeToken`, `lastLoginIp`, `profileImage`, `totpSecret`, `isActive`, `createdAt`, `updatedAt`, `deletedAt` FROM `Users` AS `User` WHERE (`User`.`deletedAt` IS ?);",
  "SELECT count(*) AS `count` FROM `Challenges` AS `Challenge` WHERE `Challenge`.`name` = ?;",
  "SELECT count(*) AS `count` FROM `Complaints` AS `Complaint` WHERE ((`Complaint`.`message` LIKE ? AND `Complaint`.`message` LIKE ?) OR (`Complaint`.`message` LIKE ? AND `Complaint`.`message` LIKE ?));",
  "SELECT count(*) AS `count` FROM `Complaints` AS `Complaint` WHERE (`Complaint`.`message` LIKE ? AND `Complaint`.`message` LIKE ?);",
  "SELECT count(*) AS `count` FROM `Complaints` AS `Complaint` WHERE (`Complaint`.`message` LIKE ? OR `Complaint`.`message` LIKE ? OR `Complaint`.`message` LIKE ? OR `Complaint`.`message` LIKE ? OR `Complaint`.`message` LIKE ?);",
  "SELECT count(*) AS `count` FROM `Complaints` AS `Complaint` WHERE (`Complaint`.`message` LIKE ? OR `Complaint`.`message` LIKE ?);",
  "SELECT count(*) AS `count` FROM `Complaints` AS `Complaint` WHERE `Complaint`.`message` LIKE ?;",
  "SELECT count(*) AS `count` FROM `Complaints` AS `Complaint`;",
  "SELECT count(*) AS `count` FROM `Feedbacks` AS `Feedback` WHERE ((`Feedback`.`comment` LIKE ? AND `Feedback`.`comment` LIKE ?) OR (`Feedback`.`comment` LIKE ? AND `Feedback`.`comment` LIKE ?));",
  "SELECT count(*) AS `count` FROM `Feedbacks` AS `Feedback` WHERE (`Feedback`.`comment` LIKE ? AND `Feedback`.`comment` LIKE ?);",
  "SELECT count(*) AS `count` FROM `Feedbacks` AS `Feedback` WHERE (`Feedback`.`comment` LIKE ? OR `Feedback`.`comment` LIKE ? OR `Feedback`.`comment` LIKE ? OR `Feedback`.`comment` LIKE ? OR `Feedback`.`comment` LIKE ?);",
  "SELECT count(*) AS `count` FROM `Feedbacks` AS `Feedback` WHERE (`Feedback`.`comment` LIKE ? OR `Feedback`.`comment` LIKE ?);",
  "SELECT count(*) AS `count` FROM `Feedbacks` AS `Feedback` WHERE `Feedback`.`comment` LIKE ?;",
  "SELECT count(*) AS `count` FROM `Feedbacks` AS `Feedback` WHERE `Feedback`.`rating` = ?;",
  "SELECT count(*) AS `count` FROM `Feedbacks` AS `Feedback`;",
  "SELECT count(*) AS `count` FROM `Quantities` AS `Quantity`;",
  "SELECT count(*) AS `count` FROM `Users` AS `User` WHERE (`User`.`deletedAt` IS ? AND `User`.`role` = ?);",
  "SELECT count(*) AS `count` FROM `Users` AS `User` WHERE (`User`.`deletedAt` IS ?);",
  "SELECT sql FROM sqlite_master",
  "SELECT sum(`balance`) AS `sum` FROM `Wallets` AS `Wallet`;",
  "UPDATE `Users` SET `deletedAt`=$? WHERE `deletedAt` IS ? AND `id` = $?"
]