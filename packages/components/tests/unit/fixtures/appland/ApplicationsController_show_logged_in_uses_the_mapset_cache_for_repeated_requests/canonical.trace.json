[
  {
    "kind": "http_server_request",
    "route": "GET /:organization_id/:id(.:format)",
    "parameter_names": [
      "mapset",
      "controller",
      "action",
      "organization_id",
      "id"
    ],
    "status_code": 200,
    "children": [
      {
        "kind": "function",
        "function": "app/controllers/CurrentUser#allow_anonymous_access",
        "labels": []
      },
      {
        "kind": "function",
        "function": "openssl/OpenSSL::Cipher#decrypt",
        "labels": [
          "security",
          "crypto"
        ]
      },
      {
        "kind": "function",
        "function": "openssl/OpenSSL::Cipher#final",
        "labels": [
          "security",
          "crypto"
        ]
      },
      {
        "kind": "function",
        "function": "json/JSON::Ext::Parser#parse",
        "labels": [
          "serialization",
          "json"
        ]
      },
      {
        "kind": "function",
        "function": "json/JSON::Ext::Parser#parse",
        "labels": [
          "serialization",
          "json"
        ]
      },
      {
        "kind": "function",
        "function": "app/controllers/CurrentUser#check_current_user",
        "labels": [],
        "children": [
          {
            "kind": "function",
            "function": "app/controllers/CurrentUser#anonymous_access?",
            "labels": []
          },
          {
            "kind": "function",
            "function": "app/controllers/CurrentUser#current_user",
            "labels": [],
            "children": [
              {
                "kind": "function",
                "function": "app/controllers/CurrentUser#lookup_session_user",
                "labels": [
                  "provider.authentication"
                ],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/User.find_by_id!",
                    "labels": [],
                    "children": [
                      {
                        "kind": "sql",
                        "sql": {
                          "normalized_query": "SELECT * FROM \"users\" WHERE (\"id\" = ?) LIMIT ?"
                        },
                        "analyzed_query": {
                          "actions": [
                            "select"
                          ],
                          "tables": [
                            "users"
                          ],
                          "columns": [
                            "*",
                            "id"
                          ],
                          "joinCount": 0
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "kind": "function",
            "function": "app/controllers/CurrentUser#current_user",
            "labels": []
          }
        ]
      },
      {
        "kind": "function",
        "function": "app/models/User::Show#accept_eula?",
        "labels": []
      },
      {
        "kind": "function",
        "function": "app/controllers/CurrentUser#with_authentication",
        "labels": [],
        "children": [
          {
            "kind": "function",
            "function": "app/models/Configuration.find",
            "labels": [],
            "children": [
              {
                "kind": "function",
                "function": "json/JSON::Ext::Parser#parse",
                "labels": [
                  "serialization",
                  "json"
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Configuration#attributes=",
                "labels": []
              }
            ]
          },
          {
            "kind": "function",
            "function": "app/models/Configuration#attributes",
            "labels": []
          },
          {
            "kind": "function",
            "function": "app/controllers/CurrentUser#current_user",
            "labels": []
          },
          {
            "kind": "function",
            "function": "app/models/App::Search#find!",
            "labels": [],
            "children": [
              {
                "kind": "function",
                "function": "app/models/App::Search#find_by_slug!",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/App::Search#find_by_org_scope!",
                    "labels": [],
                    "children": [
                      {
                        "kind": "function",
                        "function": "app/models/Search#filter",
                        "labels": [],
                        "children": [
                          {
                            "kind": "function",
                            "function": "app/models/User::Show#admin?",
                            "labels": []
                          }
                        ]
                      },
                      {
                        "kind": "sql",
                        "sql": {
                          "normalized_query": "SELECT \"apps\".* FROM \"apps\" INNER JOIN \"orgs\" ON (\"orgs\".\"id\" = \"apps\".\"org_id\") WHERE ((\"apps\".\"slug\" = ?) AND (\"orgs\".\"slug\" = ?)) LIMIT ?"
                        },
                        "analyzed_query": {
                          "actions": [
                            "select"
                          ],
                          "tables": [
                            "apps",
                            "orgs"
                          ],
                          "columns": [
                            "apps.*",
                            "apps.org_id",
                            "apps.slug",
                            "orgs.id",
                            "orgs.slug"
                          ],
                          "joinCount": 1
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "kind": "function",
            "function": "app/models/App::Show#mapsets",
            "labels": [],
            "children": [
              {
                "kind": "function",
                "function": "app/models/Mapset.ordered_list",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/DAO::App#ordered_mapset_dataset",
                    "labels": []
                  },
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "SELECT *, \"mapsets\".\"name\", \"mapsets\".\"branch\", \"mapsets\".\"commit\", \"mapsets\".\"environment\", \"mapsets\".\"version\", (SELECT \"login\" FROM \"users\" WHERE (\"id\" = \"user_id\")), (SELECT count(*) AS \"scenario_count\" FROM \"scenarios\" WHERE (\"mapset_id\" = \"mapsets\".\"id\")) FROM \"mapsets_preference_ordered\" AS \"mapsets\" WHERE (\"mapsets\".\"app_id\" = ?)"
                    },
                    "analyzed_query": {
                      "actions": [
                        "select"
                      ],
                      "tables": [
                        "mapsets_preference_ordered",
                        "scenarios",
                        "users"
                      ],
                      "columns": [
                        "*",
                        "id",
                        "login",
                        "mapset_id",
                        "mapsets.app_id",
                        "mapsets.branch",
                        "mapsets.commit",
                        "mapsets.environment",
                        "mapsets.id",
                        "mapsets.name",
                        "mapsets.version",
                        "user_id"
                      ],
                      "joinCount": 0
                    }
                  }
                ]
              }
            ]
          },
          {
            "kind": "function",
            "function": "app/models/Mapset.find_in_app!",
            "labels": [],
            "children": [
              {
                "kind": "function",
                "function": "app/models/App::Show#mapsets",
                "labels": []
              },
              {
                "kind": "sql",
                "sql": {
                  "normalized_query": "SELECT * FROM \"mapsets\" WHERE \"id\" = ?"
                },
                "analyzed_query": {
                  "actions": [
                    "select"
                  ],
                  "tables": [
                    "mapsets"
                  ],
                  "columns": [
                    "*",
                    "id"
                  ],
                  "joinCount": 0
                }
              }
            ]
          },
          {
            "kind": "function",
            "function": "app/controllers/ApplicationsController#show",
            "labels": [],
            "children": [
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#pending?",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/Mapset::Show#pending_scenarios",
                    "labels": []
                  },
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "SELECT * FROM \"scenarios\" WHERE ((\"scenarios\".\"mapset_id\" = ?) AND (\"data\" IS ?) AND ((\"scenarios\".\"sha_256\" NOT IN (SELECT \"scenario_processing_errors\".\"sha_256\" FROM \"scenario_processing_errors\" WHERE ((\"version\" = ?) AND (\"scenario_processing_errors\".\"sha_256\" IS NOT ?)))) OR (\"scenarios\".\"sha_256\" IS ?)))"
                    },
                    "analyzed_query": {
                      "actions": [
                        "select"
                      ],
                      "tables": [
                        "scenario_processing_errors",
                        "scenarios"
                      ],
                      "columns": [
                        "*",
                        "data",
                        "scenario_processing_errors.sha_256",
                        "scenarios.mapset_id",
                        "scenarios.sha_256",
                        "version"
                      ],
                      "joinCount": 0
                    }
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/controllers/CurrentUser#current_user",
                "labels": []
              },
              {
                "kind": "function",
                "function": "app/models/App::Search#search",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/Search#filter",
                    "labels": [],
                    "children": [
                      {
                        "kind": "function",
                        "function": "app/models/User::Show#admin?",
                        "labels": []
                      }
                    ]
                  },
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "SELECT \"apps\".\"id\", \"apps\".\"name\" AS \"name\", \"orgs\".\"slug\" AS \"org_slug\", \"orgs\".\"name\" AS \"org_name\", \"url\", \"apps\".\"created_at\", \"apps\".\"slug\", \"users\".\"login\" AS \"owner_login\" FROM \"apps\" INNER JOIN \"orgs\" ON (\"orgs\".\"id\" = \"apps\".\"org_id\") INNER JOIN \"users\" ON (\"users\".\"id\" = \"orgs\".\"owner_id\") ORDER BY \"name\" OFFSET ?"
                    },
                    "analyzed_query": {
                      "actions": [
                        "select"
                      ],
                      "tables": [
                        "apps",
                        "orgs",
                        "users"
                      ],
                      "columns": [
                        "apps.created_at",
                        "apps.id",
                        "apps.name",
                        "apps.org_id",
                        "apps.slug",
                        "name",
                        "orgs.id",
                        "orgs.name",
                        "orgs.owner_id",
                        "orgs.slug",
                        "url",
                        "users.id",
                        "users.login"
                      ],
                      "joinCount": 2
                    }
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#pending?",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/Mapset::Show#pending_scenarios",
                    "labels": []
                  },
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "SELECT * FROM \"scenarios\" WHERE ((\"scenarios\".\"mapset_id\" = ?) AND (\"data\" IS ?) AND ((\"scenarios\".\"sha_256\" NOT IN (SELECT \"scenario_processing_errors\".\"sha_256\" FROM \"scenario_processing_errors\" WHERE ((\"version\" = ?) AND (\"scenario_processing_errors\".\"sha_256\" IS NOT ?)))) OR (\"scenarios\".\"sha_256\" IS ?)))"
                    },
                    "analyzed_query": {
                      "actions": [
                        "select"
                      ],
                      "tables": [
                        "scenario_processing_errors",
                        "scenarios"
                      ],
                      "columns": [
                        "*",
                        "data",
                        "scenario_processing_errors.sha_256",
                        "scenarios.mapset_id",
                        "scenarios.sha_256",
                        "version"
                      ],
                      "joinCount": 0
                    }
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#with_cache",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/Mapset::MapsetCacheModule.included",
                    "labels": []
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#scenarios",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/Scenario::SearchActions.search",
                    "labels": [],
                    "children": [
                      {
                        "kind": "sql",
                        "sql": {
                          "normalized_query": "SELECT \"scenarios\".\"id\", \"scenarios\".\"uuid\", metadata->>? AS \"name\", metadata->>? AS \"feature_group\", metadata->>? AS \"feature\", \"scenarios\".\"event_field_counts\", \"scenarios\".\"mapset_id\", \"mapsets\".\"app_id\", \"scenarios\".\"created_at\", \"metadata\" FROM \"scenarios\" INNER JOIN \"mapsets\" ON (\"mapsets\".\"id\" = \"scenarios\".\"mapset_id\") WHERE (\"scenarios\".\"mapset_id\" = ?) ORDER BY \"scenarios\".\"created_at\" DESC"
                        },
                        "analyzed_query": {
                          "actions": [
                            "select"
                          ],
                          "tables": [
                            "mapsets",
                            "scenarios"
                          ],
                          "columns": [
                            "mapsets.app_id",
                            "mapsets.id",
                            "metadata",
                            "scenarios.created_at",
                            "scenarios.event_field_counts",
                            "scenarios.id",
                            "scenarios.mapset_id",
                            "scenarios.uuid"
                          ],
                          "joinCount": 1
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#paginate_scenario_count",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/Scenario::SearchActions.count",
                    "labels": [],
                    "children": [
                      {
                        "kind": "sql",
                        "sql": {
                          "normalized_query": "SELECT count(*) AS \"v\" FROM \"scenarios\" INNER JOIN \"mapsets\" ON (\"mapsets\".\"id\" = \"scenarios\".\"mapset_id\") WHERE (\"scenarios\".\"mapset_id\" = ?) LIMIT ?"
                        },
                        "analyzed_query": {
                          "actions": [
                            "select"
                          ],
                          "tables": [
                            "mapsets",
                            "scenarios"
                          ],
                          "columns": [
                            "*",
                            "mapsets.id",
                            "scenarios.mapset_id"
                          ],
                          "joinCount": 1
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#paginate_scenarios",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/Scenario::SearchActions.search",
                    "labels": [],
                    "children": [
                      {
                        "kind": "sql",
                        "sql": {
                          "normalized_query": "SELECT \"scenarios\".\"id\", \"scenarios\".\"uuid\", metadata->>? AS \"name\", metadata->>? AS \"feature_group\", metadata->>? AS \"feature\", \"scenarios\".\"event_field_counts\", \"scenarios\".\"mapset_id\", \"mapsets\".\"app_id\", \"scenarios\".\"created_at\" FROM \"scenarios\" INNER JOIN \"mapsets\" ON (\"mapsets\".\"id\" = \"scenarios\".\"mapset_id\") WHERE (\"scenarios\".\"mapset_id\" = ?) ORDER BY metadata->>? LIMIT ? OFFSET ?"
                        },
                        "analyzed_query": {
                          "actions": [
                            "select"
                          ],
                          "tables": [
                            "mapsets",
                            "scenarios"
                          ],
                          "columns": [
                            "mapsets.app_id",
                            "mapsets.id",
                            "metadata",
                            "scenarios.created_at",
                            "scenarios.event_field_counts",
                            "scenarios.id",
                            "scenarios.mapset_id",
                            "scenarios.uuid"
                          ],
                          "joinCount": 1
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#component_diagram",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/Scenario::SearchActions.search",
                    "labels": [],
                    "children": [
                      {
                        "kind": "sql",
                        "sql": {
                          "normalized_query": "SELECT \"scenarios\".\"id\", \"scenarios\".\"uuid\", metadata->>? AS \"name\", metadata->>? AS \"feature_group\", metadata->>? AS \"feature\", \"scenarios\".\"event_field_counts\", \"scenarios\".\"mapset_id\", \"mapsets\".\"app_id\", \"scenarios\".\"created_at\" FROM \"scenarios\" INNER JOIN \"mapsets\" ON (\"mapsets\".\"id\" = \"scenarios\".\"mapset_id\") WHERE (\"scenarios\".\"mapset_id\" = ?) ORDER BY \"scenarios\".\"created_at\" DESC"
                        },
                        "analyzed_query": {
                          "actions": [
                            "select"
                          ],
                          "tables": [
                            "mapsets",
                            "scenarios"
                          ],
                          "columns": [
                            "mapsets.app_id",
                            "mapsets.id",
                            "metadata",
                            "scenarios.created_at",
                            "scenarios.event_field_counts",
                            "scenarios.id",
                            "scenarios.mapset_id",
                            "scenarios.uuid"
                          ],
                          "joinCount": 1
                        }
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "app/models/DAO::Scenario.distinct_invocation_graph_dataset",
                    "labels": []
                  },
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "SELECT DISTINCT \"caller\", \"callee\" FROM \"scenarios\", lateral jsonb_to_recordset(class_invocation_graph) as graph(caller q_class, callee q_class) WHERE (? = ?)"
                    },
                    "analyzed_query": {
                      "actions": [
                        "select"
                      ],
                      "tables": [
                        "scenarios"
                      ],
                      "columns": [
                        "callee",
                        "caller",
                        "class_invocation_graph"
                      ],
                      "joinCount": 1
                    }
                  },
                  {
                    "kind": "function",
                    "function": "lib/appland/Diagram::ComponentDiagram.from_invocation_graph",
                    "labels": [],
                    "children": [
                      {
                        "kind": "function",
                        "function": "lib/appland/Diagram::ComponentDiagram#add_graph",
                        "labels": []
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "app/models/DAO::Scenario.first_source_control_dataset",
                    "labels": []
                  },
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "SELECT scenarios.metadata->?->>? AS \"repository_url\", scenarios.metadata->?->>? AS \"commit\" FROM \"scenarios\" WHERE ((scenarios.metadata->?->>? IS NOT ?) AND (scenarios.metadata->?->>? IS NOT ?) AND (? = ?)) LIMIT ?"
                    },
                    "analyzed_query": {
                      "actions": [
                        "select"
                      ],
                      "tables": [
                        "scenarios"
                      ],
                      "columns": [
                        "scenarios.metadata"
                      ],
                      "joinCount": 0
                    }
                  },
                  {
                    "kind": "function",
                    "function": "app/models/DAO::Scenario.class_locations_dataset",
                    "labels": []
                  },
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "SELECT jsonb_object_agg(compute_code_objects_by_location(data->?)) AS \"code_objects_by_location\" FROM \"scenarios\" WHERE (? = ?) LIMIT ?"
                    },
                    "analyzed_query": {
                      "actions": [
                        "select"
                      ],
                      "tables": [
                        "scenarios"
                      ],
                      "columns": [
                        "data"
                      ],
                      "joinCount": 0
                    }
                  },
                  {
                    "kind": "function",
                    "function": "json/JSON::Ext::Parser#parse",
                    "labels": [
                      "serialization",
                      "json"
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "lib/appland/Diagram::ComponentDiagram#set_class_locations",
                    "labels": []
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#app",
                "labels": [],
                "children": [
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "SELECT * FROM \"apps\" WHERE \"id\" = ?"
                    },
                    "analyzed_query": {
                      "actions": [
                        "select"
                      ],
                      "tables": [
                        "apps"
                      ],
                      "columns": [
                        "*",
                        "id"
                      ],
                      "joinCount": 0
                    }
                  },
                  {
                    "kind": "function",
                    "function": "app/models/DAO::ToModel#to_model",
                    "labels": []
                  }
                ]
              }
            ]
          },
          {
            "kind": "function",
            "function": "action_view/ActionView::Renderer#render",
            "labels": [
              "view"
            ],
            "children": [
              {
                "kind": "function",
                "function": "app/models/App::Show#fully_qualified_name",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/App::Show#org",
                    "labels": [],
                    "children": [
                      {
                        "kind": "sql",
                        "sql": {
                          "normalized_query": "SELECT * FROM \"orgs\" WHERE \"id\" = ?"
                        },
                        "analyzed_query": {
                          "actions": [
                            "select"
                          ],
                          "tables": [
                            "orgs"
                          ],
                          "columns": [
                            "*",
                            "id"
                          ],
                          "joinCount": 0
                        }
                      },
                      {
                        "kind": "function",
                        "function": "app/models/DAO::ToModel#to_model",
                        "labels": []
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "app/models/Org::Show#personal?",
                    "labels": []
                  },
                  {
                    "kind": "function",
                    "function": "app/models/App::Show#org",
                    "labels": []
                  },
                  {
                    "kind": "function",
                    "function": "app/models/Org::Show#name",
                    "labels": [],
                    "children": [
                      {
                        "kind": "function",
                        "function": "app/models/Org::Show#personal?",
                        "labels": []
                      }
                    ]
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#web_resources",
                "labels": [],
                "children": [
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "SELECT * FROM \"mapset_caches\" WHERE (\"mapset_id\" = ?) LIMIT ?"
                    },
                    "analyzed_query": {
                      "actions": [
                        "select"
                      ],
                      "tables": [
                        "mapset_caches"
                      ],
                      "columns": [
                        "*",
                        "mapset_id"
                      ],
                      "joinCount": 0
                    }
                  },
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "SELECT mapset_digest(?) AS \"digest\" LIMIT ?"
                    },
                    "analyzed_query": {
                      "actions": [
                        "select"
                      ],
                      "tables": [],
                      "columns": [],
                      "joinCount": 0
                    }
                  },
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "INSERT INTO \"mapset_caches\" (\"mapset_id\", \"sha_256\") VALUES (?, ?) RETURNING *"
                    },
                    "analyzed_query": {
                      "actions": [
                        "insert"
                      ],
                      "tables": [
                        "mapset_caches"
                      ],
                      "columns": [
                        "mapset_id",
                        "sha_256"
                      ],
                      "joinCount": 0
                    }
                  },
                  {
                    "kind": "function",
                    "function": "app/models/Mapset::Show#web_resources",
                    "labels": [],
                    "children": [
                      {
                        "kind": "function",
                        "function": "app/models/Mapset::Show#data_model",
                        "labels": [],
                        "children": [
                          {
                            "kind": "function",
                            "function": "app/models/Mapset::Show#data_model",
                            "labels": [],
                            "children": [
                              {
                                "kind": "function",
                                "function": "app/models/DataModel.for_mapset",
                                "labels": [],
                                "children": [
                                  {
                                    "kind": "function",
                                    "function": "app/models/DAO::Scenario.sql_queries_dataset",
                                    "labels": []
                                  },
                                  {
                                    "kind": "sql",
                                    "sql": {
                                      "normalized_query": "WITH \"sql_queries\" AS (SELECT sql_query.sql_query ->> ?::text AS \"database_type\", COALESCE(sql_query.sql_query ->> ?, sql_query.sql_query ->> ?)::text AS \"sql\" FROM \"scenarios\", LATERAL jsonb_to_recordset(COALESCE(scenarios.events_sql_queries, ?::jsonb)) sql_query(id integer, sql_query jsonb) WHERE (\"mapset_id\" = ?)) SELECT DISTINCT \"sql\" FROM \"sql_queries\""
                                    },
                                    "analyzed_query": {
                                      "actions": [
                                        "select"
                                      ],
                                      "tables": [
                                        "scenarios",
                                        "sql_queries"
                                      ],
                                      "columns": [
                                        "mapset_id",
                                        "scenarios.events_sql_queries",
                                        "sql",
                                        "sql_query.sql_query"
                                      ],
                                      "joinCount": 1
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "kind": "function",
                            "function": "json/JSON::Ext::Generator::State#generate",
                            "labels": [
                              "serialization",
                              "json"
                            ]
                          },
                          {
                            "kind": "sql",
                            "sql": {
                              "normalized_query": "UPDATE \"mapset_caches\" SET \"data_model\" = ?::jsonb WHERE (\"id\" = ?)"
                            },
                            "analyzed_query": {
                              "actions": [
                                "update"
                              ],
                              "tables": [
                                "mapset_caches"
                              ],
                              "columns": [
                                "data_model",
                                "id"
                              ],
                              "joinCount": 0
                            }
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "function": "app/models/WebResources.load",
                        "labels": [],
                        "children": [
                          {
                            "kind": "sql",
                            "sql": {
                              "normalized_query": "SELECT * FROM \"mapsets\" WHERE (\"id\" = ?) LIMIT ?"
                            },
                            "analyzed_query": {
                              "actions": [
                                "select"
                              ],
                              "tables": [
                                "mapsets"
                              ],
                              "columns": [
                                "*",
                                "id"
                              ],
                              "joinCount": 0
                            }
                          },
                          {
                            "kind": "sql",
                            "sql": {
                              "normalized_query": "SELECT metadata->>? AS \"name\", \"uuid\", \"events_http_server_requests\", \"events_http_server_responses\" FROM \"scenarios\" WHERE ((\"scenarios\".\"mapset_id\" = ?) AND ((\"events_http_server_requests\" IS NOT ?) OR (\"events_http_server_responses\" IS NOT ?)))"
                            },
                            "analyzed_query": {
                              "actions": [
                                "select"
                              ],
                              "tables": [
                                "scenarios"
                              ],
                              "columns": [
                                "events_http_server_requests",
                                "events_http_server_responses",
                                "metadata",
                                "scenarios.mapset_id",
                                "uuid"
                              ],
                              "joinCount": 0
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "json/JSON::Ext::Generator::State#generate",
                    "labels": [
                      "serialization",
                      "json"
                    ]
                  },
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "UPDATE \"mapset_caches\" SET \"web_resources\" = ?::jsonb WHERE (\"id\" = ?)"
                    },
                    "analyzed_query": {
                      "actions": [
                        "update"
                      ],
                      "tables": [
                        "mapset_caches"
                      ],
                      "columns": [
                        "id",
                        "web_resources"
                      ],
                      "joinCount": 0
                    }
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/WebResources#any?",
                "labels": []
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#data_model",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/DataModel.dehydrate",
                    "labels": []
                  }
                ]
              },
              {
                "kind": "function",
                "function": "action_view/ActionView::Renderer#render",
                "labels": [
                  "view"
                ],
                "children": [
                  {
                    "kind": "function",
                    "function": "action_view/ActionView::Renderer#render",
                    "labels": [
                      "view"
                    ],
                    "children": [
                      {
                        "kind": "function",
                        "function": "action_view/ActionView::Renderer#render",
                        "labels": [
                          "view"
                        ]
                      },
                      {
                        "kind": "function",
                        "function": "action_view/ActionView::Renderer#render",
                        "labels": [
                          "view"
                        ]
                      },
                      {
                        "kind": "function",
                        "function": "action_view/ActionView::Renderer#render",
                        "labels": [
                          "view"
                        ]
                      },
                      {
                        "kind": "function",
                        "function": "action_view/ActionView::Renderer#render",
                        "labels": [
                          "view"
                        ]
                      },
                      {
                        "kind": "function",
                        "function": "action_view/ActionView::Renderer#render",
                        "labels": [
                          "view"
                        ]
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "action_view/ActionView::Renderer#render",
                    "labels": [
                      "view"
                    ]
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#data_model",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/DataModel.dehydrate",
                    "labels": []
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#web_resources",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/WebResources.dehydrate",
                    "labels": []
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/WebResources#any?",
                "labels": []
              },
              {
                "kind": "function",
                "function": "app/helpers/ApplicationPathHelper#application_path",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/App::Show#org",
                    "labels": []
                  }
                ]
              },
              {
                "kind": "function",
                "function": "action_view/ActionView::Renderer#render",
                "labels": [
                  "view"
                ],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/controllers/CurrentUser#current_user",
                    "labels": []
                  },
                  {
                    "kind": "function",
                    "function": "app/models/App::Show#managed_by?",
                    "labels": [],
                    "children": [
                      {
                        "kind": "sql",
                        "sql": {
                          "normalized_query": "SELECT * FROM \"users\" WHERE \"id\" = ?"
                        },
                        "analyzed_query": {
                          "actions": [
                            "select"
                          ],
                          "tables": [
                            "users"
                          ],
                          "columns": [
                            "*",
                            "id"
                          ],
                          "joinCount": 0
                        }
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "app/models/Mapset::Show#recording_method_counts",
                    "labels": [],
                    "children": [
                      {
                        "kind": "function",
                        "function": "app/models/Mapset::Show#recording_method_counts",
                        "labels": [],
                        "children": [
                          {
                            "kind": "function",
                            "function": "app/models/RecordingMethod.count",
                            "labels": [],
                            "children": [
                              {
                                "kind": "function",
                                "function": "app/models/DAO::Scenario.recording_methods_dataset",
                                "labels": []
                              },
                              {
                                "kind": "sql",
                                "sql": {
                                  "normalized_query": "WITH \"recording_methods\" AS (SELECT scenarios.metadata->?->>? AS \"recording_method\" FROM \"scenarios\" WHERE ((scenarios.metadata->?->>? IS NOT ?) AND (\"mapset_id\" = ?))) SELECT \"recording_method\", count(*) AS \"num_scenarios\" FROM \"recording_methods\" GROUP BY \"recording_method\""
                                },
                                "analyzed_query": {
                                  "actions": [
                                    "select"
                                  ],
                                  "tables": [
                                    "recording_methods",
                                    "scenarios"
                                  ],
                                  "columns": [
                                    "*",
                                    "mapset_id",
                                    "recording_method",
                                    "scenarios.metadata"
                                  ],
                                  "joinCount": 0
                                }
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "function": "json/JSON::Ext::Generator::State#generate",
                        "labels": [
                          "serialization",
                          "json"
                        ]
                      },
                      {
                        "kind": "sql",
                        "sql": {
                          "normalized_query": "UPDATE \"mapset_caches\" SET \"recording_method_counts\" = ?::jsonb WHERE (\"id\" = ?)"
                        },
                        "analyzed_query": {
                          "actions": [
                            "update"
                          ],
                          "tables": [
                            "mapset_caches"
                          ],
                          "columns": [
                            "id",
                            "recording_method_counts"
                          ],
                          "joinCount": 0
                        }
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "app/models/Mapset::Show#recording_method_counts",
                    "labels": []
                  },
                  {
                    "kind": "function",
                    "function": "app/models/Mapset::Show#recording_method_counts",
                    "labels": []
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/helpers/ApplicationPathHelper#application_path",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/App::Show#org",
                    "labels": []
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#code_object_counts",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/Mapset::Show#code_object_counts",
                    "labels": [],
                    "children": [
                      {
                        "kind": "function",
                        "function": "app/models/CodeObject.count_table",
                        "labels": [],
                        "children": [
                          {
                            "kind": "function",
                            "function": "app/models/CodeObject.count",
                            "labels": [],
                            "children": [
                              {
                                "kind": "function",
                                "function": "app/models/DAO::Scenario.distinct_code_objects_dataset",
                                "labels": []
                              },
                              {
                                "kind": "sql",
                                "sql": {
                                  "normalized_query": "WITH \"code_objects\" AS (SELECT DISTINCT \"type\", \"object_name\" FROM \"scenarios\" INNER JOIN \"scenario_code_objects\" ON (\"scenario_code_objects\".\"scenario_id\" = \"scenarios\".\"id\") WHERE (\"mapset_id\" = ?)) SELECT \"type\", count(\"object_name\") AS \"num_code_objects\" FROM \"code_objects\" GROUP BY \"type\""
                                },
                                "analyzed_query": {
                                  "actions": [
                                    "select"
                                  ],
                                  "tables": [
                                    "code_objects",
                                    "scenario_code_objects",
                                    "scenarios"
                                  ],
                                  "columns": [
                                    "mapset_id",
                                    "object_name",
                                    "scenario_code_objects.scenario_id",
                                    "scenarios.id",
                                    "type"
                                  ],
                                  "joinCount": 1
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "json/JSON::Ext::Generator::State#generate",
                    "labels": [
                      "serialization",
                      "json"
                    ]
                  },
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "UPDATE \"mapset_caches\" SET \"code_object_counts\" = ?::jsonb WHERE (\"id\" = ?)"
                    },
                    "analyzed_query": {
                      "actions": [
                        "update"
                      ],
                      "tables": [
                        "mapset_caches"
                      ],
                      "columns": [
                        "code_object_counts",
                        "id"
                      ],
                      "joinCount": 0
                    }
                  }
                ]
              },
              {
                "kind": "function",
                "function": "action_view/ActionView::Renderer#render",
                "labels": [
                  "view"
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#key_stats_counts",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/Mapset::Show#key_stats_counts",
                    "labels": [],
                    "children": [
                      {
                        "kind": "function",
                        "function": "app/models/KeyDataStats.count_table",
                        "labels": [],
                        "children": [
                          {
                            "kind": "function",
                            "function": "app/models/KeyDataStats.count",
                            "labels": [],
                            "children": [
                              {
                                "kind": "function",
                                "function": "app/models/DAO::Scenario.http_server_requests_dataset",
                                "labels": []
                              },
                              {
                                "kind": "sql",
                                "sql": {
                                  "normalized_query": "WITH \"key_data_stats\" AS (SELECT DISTINCT http_server_request.http_server_request ->> ?::text AS \"request_method\", http_server_request.http_server_request ->> ?::text AS \"path_info\" FROM \"scenarios\", LATERAL jsonb_to_recordset(COALESCE(scenarios.events_http_server_requests, ?::jsonb)) http_server_request(id integer, http_server_request jsonb) WHERE (\"mapset_id\" = ?)) SELECT count(*) AS \"num_distinct\" FROM \"key_data_stats\" LIMIT ?"
                                },
                                "analyzed_query": {
                                  "actions": [
                                    "select"
                                  ],
                                  "tables": [
                                    "key_data_stats",
                                    "scenarios"
                                  ],
                                  "columns": [
                                    "*",
                                    "http_server_request.http_server_request",
                                    "mapset_id",
                                    "scenarios.events_http_server_requests"
                                  ],
                                  "joinCount": 1
                                }
                              }
                            ]
                          },
                          {
                            "kind": "function",
                            "function": "app/models/KeyDataStats.count",
                            "labels": [],
                            "children": [
                              {
                                "kind": "function",
                                "function": "app/models/DAO::Scenario.sql_queries_dataset",
                                "labels": []
                              },
                              {
                                "kind": "sql",
                                "sql": {
                                  "normalized_query": "WITH \"key_data_stats\" AS (SELECT DISTINCT sql_query.sql_query ->> ?::text AS \"database_type\", COALESCE(sql_query.sql_query ->> ?, sql_query.sql_query ->> ?)::text AS \"sql\" FROM \"scenarios\", LATERAL jsonb_to_recordset(COALESCE(scenarios.events_sql_queries, ?::jsonb)) sql_query(id integer, sql_query jsonb) WHERE (\"mapset_id\" = ?)) SELECT count(*) AS \"num_distinct\" FROM \"key_data_stats\" LIMIT ?"
                                },
                                "analyzed_query": {
                                  "actions": [
                                    "select"
                                  ],
                                  "tables": [
                                    "key_data_stats",
                                    "scenarios"
                                  ],
                                  "columns": [
                                    "*",
                                    "mapset_id",
                                    "scenarios.events_sql_queries",
                                    "sql_query.sql_query"
                                  ],
                                  "joinCount": 1
                                }
                              }
                            ]
                          },
                          {
                            "kind": "function",
                            "function": "app/models/KeyDataStats.count",
                            "labels": [],
                            "children": [
                              {
                                "kind": "function",
                                "function": "app/models/DAO::Scenario.messages_dataset",
                                "labels": []
                              },
                              {
                                "kind": "sql",
                                "sql": {
                                  "normalized_query": "WITH \"key_data_stats\" AS (WITH \"messages\" AS (SELECT array_agg(msg.name) AS \"message_fields\" FROM \"scenarios\", LATERAL jsonb_to_recordset(COALESCE(scenarios.events_messages, ?::jsonb)) message(id integer, message jsonb), LATERAL jsonb_to_recordset(message.message) msg(name text) WHERE (\"mapset_id\" = ?) GROUP BY \"message\".\"id\") SELECT DISTINCT \"message_fields\" FROM \"messages\") SELECT count(*) AS \"num_distinct\" FROM \"key_data_stats\" LIMIT ?"
                                },
                                "analyzed_query": {
                                  "actions": [
                                    "select"
                                  ],
                                  "tables": [
                                    "key_data_stats",
                                    "messages",
                                    "scenarios"
                                  ],
                                  "columns": [
                                    "*",
                                    "mapset_id",
                                    "message.id",
                                    "message.message",
                                    "message_fields",
                                    "msg.name",
                                    "scenarios.events_messages"
                                  ],
                                  "joinCount": 2
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "json/JSON::Ext::Generator::State#generate",
                    "labels": [
                      "serialization",
                      "json"
                    ]
                  },
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "UPDATE \"mapset_caches\" SET \"key_stats_counts\" = ?::jsonb WHERE (\"id\" = ?)"
                    },
                    "analyzed_query": {
                      "actions": [
                        "update"
                      ],
                      "tables": [
                        "mapset_caches"
                      ],
                      "columns": [
                        "id",
                        "key_stats_counts"
                      ],
                      "joinCount": 0
                    }
                  }
                ]
              },
              {
                "kind": "function",
                "function": "action_view/ActionView::Renderer#render",
                "labels": [
                  "view"
                ]
              },
              {
                "kind": "function",
                "function": "app/helpers/ApplicationPathHelper#application_path",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/App::Show#org",
                    "labels": []
                  }
                ]
              },
              {
                "kind": "function",
                "function": "action_view/ActionView::Renderer#render",
                "labels": [
                  "view"
                ]
              },
              {
                "kind": "function",
                "function": "action_view/ActionView::Renderer#render",
                "labels": [
                  "view"
                ]
              },
              {
                "kind": "function",
                "function": "action_view/ActionView::Renderer#render",
                "labels": [
                  "view"
                ]
              },
              {
                "kind": "function",
                "function": "action_view/ActionView::Renderer#render",
                "labels": [
                  "view"
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#data_model",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/DataModel.dehydrate",
                    "labels": []
                  }
                ]
              },
              {
                "kind": "function",
                "function": "json/JSON::Ext::Generator::State#generate",
                "labels": [
                  "serialization",
                  "json"
                ]
              },
              {
                "kind": "function",
                "function": "lib/appland/Diagram::ComponentDiagram#to_json",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "json/JSON::Ext::Generator::State#generate",
                    "labels": [
                      "serialization",
                      "json"
                    ]
                  }
                ]
              },
              {
                "kind": "function",
                "function": "openssl/Digest::Instance#digest",
                "labels": [
                  "security",
                  "crypto"
                ]
              },
              {
                "kind": "function",
                "function": "json/JSON::Ext::Parser#parse",
                "labels": [
                  "serialization",
                  "json"
                ]
              },
              {
                "kind": "function",
                "function": "action_view/ActionView::Renderer#render",
                "labels": [
                  "view"
                ],
                "children": [
                  {
                    "kind": "function",
                    "function": "action_view/ActionView::Renderer#render",
                    "labels": [
                      "view"
                    ],
                    "children": [
                      {
                        "kind": "function",
                        "function": "openssl/Digest::Instance#digest",
                        "labels": [
                          "security",
                          "crypto"
                        ]
                      },
                      {
                        "kind": "function",
                        "function": "json/JSON::Ext::Parser#parse",
                        "labels": [
                          "serialization",
                          "json"
                        ]
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "action_view/ActionView::Renderer#render",
                    "labels": [
                      "view"
                    ]
                  }
                ]
              },
              {
                "kind": "function",
                "function": "action_view/ActionView::Renderer#render",
                "labels": [
                  "view"
                ],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/helpers/ConfigurationHelper#content_for_feature_flag",
                    "labels": [],
                    "children": [
                      {
                        "kind": "function",
                        "function": "app/models/Configuration#attributes",
                        "labels": []
                      }
                    ]
                  }
                ]
              },
              {
                "kind": "function",
                "function": "action_view/ActionView::Renderer#render",
                "labels": [
                  "view"
                ],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/helpers/ConfigurationHelper#content_for_feature_flag",
                    "labels": [],
                    "children": [
                      {
                        "kind": "function",
                        "function": "app/models/Configuration#attributes",
                        "labels": []
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "action_view/ActionView::Renderer#render",
                    "labels": [
                      "view"
                    ],
                    "children": [
                      {
                        "kind": "function",
                        "function": "app/helpers/ApplicationPathHelper#application_path",
                        "labels": [],
                        "children": [
                          {
                            "kind": "function",
                            "function": "app/models/App::Show#org",
                            "labels": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "kind": "http_server_request",
    "route": "GET /:organization_id/:id(.:format)",
    "parameter_names": [
      "mapset",
      "controller",
      "action",
      "organization_id",
      "id"
    ],
    "status_code": 200,
    "children": [
      {
        "kind": "function",
        "function": "app/controllers/CurrentUser#allow_anonymous_access",
        "labels": []
      },
      {
        "kind": "function",
        "function": "openssl/OpenSSL::Cipher#decrypt",
        "labels": [
          "security",
          "crypto"
        ]
      },
      {
        "kind": "function",
        "function": "openssl/OpenSSL::Cipher#final",
        "labels": [
          "security",
          "crypto"
        ]
      },
      {
        "kind": "function",
        "function": "json/JSON::Ext::Parser#parse",
        "labels": [
          "serialization",
          "json"
        ]
      },
      {
        "kind": "function",
        "function": "json/JSON::Ext::Parser#parse",
        "labels": [
          "serialization",
          "json"
        ]
      },
      {
        "kind": "function",
        "function": "app/controllers/CurrentUser#check_current_user",
        "labels": [],
        "children": [
          {
            "kind": "function",
            "function": "app/controllers/CurrentUser#anonymous_access?",
            "labels": []
          },
          {
            "kind": "function",
            "function": "app/controllers/CurrentUser#current_user",
            "labels": [],
            "children": [
              {
                "kind": "function",
                "function": "app/controllers/CurrentUser#lookup_session_user",
                "labels": [
                  "provider.authentication"
                ],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/User.find_by_id!",
                    "labels": [],
                    "children": [
                      {
                        "kind": "sql",
                        "sql": {
                          "normalized_query": "SELECT * FROM \"users\" WHERE (\"id\" = ?) LIMIT ?"
                        },
                        "analyzed_query": {
                          "actions": [
                            "select"
                          ],
                          "tables": [
                            "users"
                          ],
                          "columns": [
                            "*",
                            "id"
                          ],
                          "joinCount": 0
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "kind": "function",
            "function": "app/controllers/CurrentUser#current_user",
            "labels": []
          }
        ]
      },
      {
        "kind": "function",
        "function": "app/models/User::Show#accept_eula?",
        "labels": []
      },
      {
        "kind": "function",
        "function": "app/controllers/CurrentUser#with_authentication",
        "labels": [],
        "children": [
          {
            "kind": "function",
            "function": "app/models/Configuration.find",
            "labels": [],
            "children": [
              {
                "kind": "function",
                "function": "json/JSON::Ext::Parser#parse",
                "labels": [
                  "serialization",
                  "json"
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Configuration#attributes=",
                "labels": []
              }
            ]
          },
          {
            "kind": "function",
            "function": "app/models/Configuration#attributes",
            "labels": []
          },
          {
            "kind": "function",
            "function": "app/controllers/CurrentUser#current_user",
            "labels": []
          },
          {
            "kind": "function",
            "function": "app/models/App::Search#find!",
            "labels": [],
            "children": [
              {
                "kind": "function",
                "function": "app/models/App::Search#find_by_slug!",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/App::Search#find_by_org_scope!",
                    "labels": [],
                    "children": [
                      {
                        "kind": "function",
                        "function": "app/models/Search#filter",
                        "labels": [],
                        "children": [
                          {
                            "kind": "function",
                            "function": "app/models/User::Show#admin?",
                            "labels": []
                          }
                        ]
                      },
                      {
                        "kind": "sql",
                        "sql": {
                          "normalized_query": "SELECT \"apps\".* FROM \"apps\" INNER JOIN \"orgs\" ON (\"orgs\".\"id\" = \"apps\".\"org_id\") WHERE ((\"apps\".\"slug\" = ?) AND (\"orgs\".\"slug\" = ?)) LIMIT ?"
                        },
                        "analyzed_query": {
                          "actions": [
                            "select"
                          ],
                          "tables": [
                            "apps",
                            "orgs"
                          ],
                          "columns": [
                            "apps.*",
                            "apps.org_id",
                            "apps.slug",
                            "orgs.id",
                            "orgs.slug"
                          ],
                          "joinCount": 1
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "kind": "function",
            "function": "app/models/App::Show#mapsets",
            "labels": [],
            "children": [
              {
                "kind": "function",
                "function": "app/models/Mapset.ordered_list",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/DAO::App#ordered_mapset_dataset",
                    "labels": []
                  },
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "SELECT *, \"mapsets\".\"name\", \"mapsets\".\"branch\", \"mapsets\".\"commit\", \"mapsets\".\"environment\", \"mapsets\".\"version\", (SELECT \"login\" FROM \"users\" WHERE (\"id\" = \"user_id\")), (SELECT count(*) AS \"scenario_count\" FROM \"scenarios\" WHERE (\"mapset_id\" = \"mapsets\".\"id\")) FROM \"mapsets_preference_ordered\" AS \"mapsets\" WHERE (\"mapsets\".\"app_id\" = ?)"
                    },
                    "analyzed_query": {
                      "actions": [
                        "select"
                      ],
                      "tables": [
                        "mapsets_preference_ordered",
                        "scenarios",
                        "users"
                      ],
                      "columns": [
                        "*",
                        "id",
                        "login",
                        "mapset_id",
                        "mapsets.app_id",
                        "mapsets.branch",
                        "mapsets.commit",
                        "mapsets.environment",
                        "mapsets.id",
                        "mapsets.name",
                        "mapsets.version",
                        "user_id"
                      ],
                      "joinCount": 0
                    }
                  }
                ]
              }
            ]
          },
          {
            "kind": "function",
            "function": "app/models/Mapset.find_in_app!",
            "labels": [],
            "children": [
              {
                "kind": "function",
                "function": "app/models/App::Show#mapsets",
                "labels": []
              },
              {
                "kind": "sql",
                "sql": {
                  "normalized_query": "SELECT * FROM \"mapsets\" WHERE \"id\" = ?"
                },
                "analyzed_query": {
                  "actions": [
                    "select"
                  ],
                  "tables": [
                    "mapsets"
                  ],
                  "columns": [
                    "*",
                    "id"
                  ],
                  "joinCount": 0
                }
              }
            ]
          },
          {
            "kind": "function",
            "function": "app/controllers/ApplicationsController#show",
            "labels": [],
            "children": [
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#pending?",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/Mapset::Show#pending_scenarios",
                    "labels": []
                  },
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "SELECT * FROM \"scenarios\" WHERE ((\"scenarios\".\"mapset_id\" = ?) AND (\"data\" IS ?) AND ((\"scenarios\".\"sha_256\" NOT IN (SELECT \"scenario_processing_errors\".\"sha_256\" FROM \"scenario_processing_errors\" WHERE ((\"version\" = ?) AND (\"scenario_processing_errors\".\"sha_256\" IS NOT ?)))) OR (\"scenarios\".\"sha_256\" IS ?)))"
                    },
                    "analyzed_query": {
                      "actions": [
                        "select"
                      ],
                      "tables": [
                        "scenario_processing_errors",
                        "scenarios"
                      ],
                      "columns": [
                        "*",
                        "data",
                        "scenario_processing_errors.sha_256",
                        "scenarios.mapset_id",
                        "scenarios.sha_256",
                        "version"
                      ],
                      "joinCount": 0
                    }
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/controllers/CurrentUser#current_user",
                "labels": []
              },
              {
                "kind": "function",
                "function": "app/models/App::Search#search",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/Search#filter",
                    "labels": [],
                    "children": [
                      {
                        "kind": "function",
                        "function": "app/models/User::Show#admin?",
                        "labels": []
                      }
                    ]
                  },
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "SELECT \"apps\".\"id\", \"apps\".\"name\" AS \"name\", \"orgs\".\"slug\" AS \"org_slug\", \"orgs\".\"name\" AS \"org_name\", \"url\", \"apps\".\"created_at\", \"apps\".\"slug\", \"users\".\"login\" AS \"owner_login\" FROM \"apps\" INNER JOIN \"orgs\" ON (\"orgs\".\"id\" = \"apps\".\"org_id\") INNER JOIN \"users\" ON (\"users\".\"id\" = \"orgs\".\"owner_id\") ORDER BY \"name\" OFFSET ?"
                    },
                    "analyzed_query": {
                      "actions": [
                        "select"
                      ],
                      "tables": [
                        "apps",
                        "orgs",
                        "users"
                      ],
                      "columns": [
                        "apps.created_at",
                        "apps.id",
                        "apps.name",
                        "apps.org_id",
                        "apps.slug",
                        "name",
                        "orgs.id",
                        "orgs.name",
                        "orgs.owner_id",
                        "orgs.slug",
                        "url",
                        "users.id",
                        "users.login"
                      ],
                      "joinCount": 2
                    }
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#pending?",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/Mapset::Show#pending_scenarios",
                    "labels": []
                  },
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "SELECT * FROM \"scenarios\" WHERE ((\"scenarios\".\"mapset_id\" = ?) AND (\"data\" IS ?) AND ((\"scenarios\".\"sha_256\" NOT IN (SELECT \"scenario_processing_errors\".\"sha_256\" FROM \"scenario_processing_errors\" WHERE ((\"version\" = ?) AND (\"scenario_processing_errors\".\"sha_256\" IS NOT ?)))) OR (\"scenarios\".\"sha_256\" IS ?)))"
                    },
                    "analyzed_query": {
                      "actions": [
                        "select"
                      ],
                      "tables": [
                        "scenario_processing_errors",
                        "scenarios"
                      ],
                      "columns": [
                        "*",
                        "data",
                        "scenario_processing_errors.sha_256",
                        "scenarios.mapset_id",
                        "scenarios.sha_256",
                        "version"
                      ],
                      "joinCount": 0
                    }
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#with_cache",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/Mapset::MapsetCacheModule.included",
                    "labels": []
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#scenarios",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/Scenario::SearchActions.search",
                    "labels": [],
                    "children": [
                      {
                        "kind": "sql",
                        "sql": {
                          "normalized_query": "SELECT \"scenarios\".\"id\", \"scenarios\".\"uuid\", metadata->>? AS \"name\", metadata->>? AS \"feature_group\", metadata->>? AS \"feature\", \"scenarios\".\"event_field_counts\", \"scenarios\".\"mapset_id\", \"mapsets\".\"app_id\", \"scenarios\".\"created_at\", \"metadata\" FROM \"scenarios\" INNER JOIN \"mapsets\" ON (\"mapsets\".\"id\" = \"scenarios\".\"mapset_id\") WHERE (\"scenarios\".\"mapset_id\" = ?) ORDER BY \"scenarios\".\"created_at\" DESC"
                        },
                        "analyzed_query": {
                          "actions": [
                            "select"
                          ],
                          "tables": [
                            "mapsets",
                            "scenarios"
                          ],
                          "columns": [
                            "mapsets.app_id",
                            "mapsets.id",
                            "metadata",
                            "scenarios.created_at",
                            "scenarios.event_field_counts",
                            "scenarios.id",
                            "scenarios.mapset_id",
                            "scenarios.uuid"
                          ],
                          "joinCount": 1
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#paginate_scenario_count",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/Scenario::SearchActions.count",
                    "labels": [],
                    "children": [
                      {
                        "kind": "sql",
                        "sql": {
                          "normalized_query": "SELECT count(*) AS \"v\" FROM \"scenarios\" INNER JOIN \"mapsets\" ON (\"mapsets\".\"id\" = \"scenarios\".\"mapset_id\") WHERE (\"scenarios\".\"mapset_id\" = ?) LIMIT ?"
                        },
                        "analyzed_query": {
                          "actions": [
                            "select"
                          ],
                          "tables": [
                            "mapsets",
                            "scenarios"
                          ],
                          "columns": [
                            "*",
                            "mapsets.id",
                            "scenarios.mapset_id"
                          ],
                          "joinCount": 1
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#paginate_scenarios",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/Scenario::SearchActions.search",
                    "labels": [],
                    "children": [
                      {
                        "kind": "sql",
                        "sql": {
                          "normalized_query": "SELECT \"scenarios\".\"id\", \"scenarios\".\"uuid\", metadata->>? AS \"name\", metadata->>? AS \"feature_group\", metadata->>? AS \"feature\", \"scenarios\".\"event_field_counts\", \"scenarios\".\"mapset_id\", \"mapsets\".\"app_id\", \"scenarios\".\"created_at\" FROM \"scenarios\" INNER JOIN \"mapsets\" ON (\"mapsets\".\"id\" = \"scenarios\".\"mapset_id\") WHERE (\"scenarios\".\"mapset_id\" = ?) ORDER BY metadata->>? LIMIT ? OFFSET ?"
                        },
                        "analyzed_query": {
                          "actions": [
                            "select"
                          ],
                          "tables": [
                            "mapsets",
                            "scenarios"
                          ],
                          "columns": [
                            "mapsets.app_id",
                            "mapsets.id",
                            "metadata",
                            "scenarios.created_at",
                            "scenarios.event_field_counts",
                            "scenarios.id",
                            "scenarios.mapset_id",
                            "scenarios.uuid"
                          ],
                          "joinCount": 1
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#component_diagram",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/Scenario::SearchActions.search",
                    "labels": [],
                    "children": [
                      {
                        "kind": "sql",
                        "sql": {
                          "normalized_query": "SELECT \"scenarios\".\"id\", \"scenarios\".\"uuid\", metadata->>? AS \"name\", metadata->>? AS \"feature_group\", metadata->>? AS \"feature\", \"scenarios\".\"event_field_counts\", \"scenarios\".\"mapset_id\", \"mapsets\".\"app_id\", \"scenarios\".\"created_at\" FROM \"scenarios\" INNER JOIN \"mapsets\" ON (\"mapsets\".\"id\" = \"scenarios\".\"mapset_id\") WHERE (\"scenarios\".\"mapset_id\" = ?) ORDER BY \"scenarios\".\"created_at\" DESC"
                        },
                        "analyzed_query": {
                          "actions": [
                            "select"
                          ],
                          "tables": [
                            "mapsets",
                            "scenarios"
                          ],
                          "columns": [
                            "mapsets.app_id",
                            "mapsets.id",
                            "metadata",
                            "scenarios.created_at",
                            "scenarios.event_field_counts",
                            "scenarios.id",
                            "scenarios.mapset_id",
                            "scenarios.uuid"
                          ],
                          "joinCount": 1
                        }
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "app/models/DAO::Scenario.distinct_invocation_graph_dataset",
                    "labels": []
                  },
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "SELECT DISTINCT \"caller\", \"callee\" FROM \"scenarios\", lateral jsonb_to_recordset(class_invocation_graph) as graph(caller q_class, callee q_class) WHERE (? = ?)"
                    },
                    "analyzed_query": {
                      "actions": [
                        "select"
                      ],
                      "tables": [
                        "scenarios"
                      ],
                      "columns": [
                        "callee",
                        "caller",
                        "class_invocation_graph"
                      ],
                      "joinCount": 1
                    }
                  },
                  {
                    "kind": "function",
                    "function": "lib/appland/Diagram::ComponentDiagram.from_invocation_graph",
                    "labels": [],
                    "children": [
                      {
                        "kind": "function",
                        "function": "lib/appland/Diagram::ComponentDiagram#add_graph",
                        "labels": []
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "app/models/DAO::Scenario.first_source_control_dataset",
                    "labels": []
                  },
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "SELECT scenarios.metadata->?->>? AS \"repository_url\", scenarios.metadata->?->>? AS \"commit\" FROM \"scenarios\" WHERE ((scenarios.metadata->?->>? IS NOT ?) AND (scenarios.metadata->?->>? IS NOT ?) AND (? = ?)) LIMIT ?"
                    },
                    "analyzed_query": {
                      "actions": [
                        "select"
                      ],
                      "tables": [
                        "scenarios"
                      ],
                      "columns": [
                        "scenarios.metadata"
                      ],
                      "joinCount": 0
                    }
                  },
                  {
                    "kind": "function",
                    "function": "app/models/DAO::Scenario.class_locations_dataset",
                    "labels": []
                  },
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "SELECT jsonb_object_agg(compute_code_objects_by_location(data->?)) AS \"code_objects_by_location\" FROM \"scenarios\" WHERE (? = ?) LIMIT ?"
                    },
                    "analyzed_query": {
                      "actions": [
                        "select"
                      ],
                      "tables": [
                        "scenarios"
                      ],
                      "columns": [
                        "data"
                      ],
                      "joinCount": 0
                    }
                  },
                  {
                    "kind": "function",
                    "function": "json/JSON::Ext::Parser#parse",
                    "labels": [
                      "serialization",
                      "json"
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "lib/appland/Diagram::ComponentDiagram#set_class_locations",
                    "labels": []
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#app",
                "labels": [],
                "children": [
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "SELECT * FROM \"apps\" WHERE \"id\" = ?"
                    },
                    "analyzed_query": {
                      "actions": [
                        "select"
                      ],
                      "tables": [
                        "apps"
                      ],
                      "columns": [
                        "*",
                        "id"
                      ],
                      "joinCount": 0
                    }
                  },
                  {
                    "kind": "function",
                    "function": "app/models/DAO::ToModel#to_model",
                    "labels": []
                  }
                ]
              }
            ]
          },
          {
            "kind": "function",
            "function": "action_view/ActionView::Renderer#render",
            "labels": [
              "view"
            ],
            "children": [
              {
                "kind": "function",
                "function": "app/models/App::Show#fully_qualified_name",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/App::Show#org",
                    "labels": [],
                    "children": [
                      {
                        "kind": "sql",
                        "sql": {
                          "normalized_query": "SELECT * FROM \"orgs\" WHERE \"id\" = ?"
                        },
                        "analyzed_query": {
                          "actions": [
                            "select"
                          ],
                          "tables": [
                            "orgs"
                          ],
                          "columns": [
                            "*",
                            "id"
                          ],
                          "joinCount": 0
                        }
                      },
                      {
                        "kind": "function",
                        "function": "app/models/DAO::ToModel#to_model",
                        "labels": []
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "app/models/Org::Show#personal?",
                    "labels": []
                  },
                  {
                    "kind": "function",
                    "function": "app/models/App::Show#org",
                    "labels": []
                  },
                  {
                    "kind": "function",
                    "function": "app/models/Org::Show#name",
                    "labels": [],
                    "children": [
                      {
                        "kind": "function",
                        "function": "app/models/Org::Show#personal?",
                        "labels": []
                      }
                    ]
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#web_resources",
                "labels": [],
                "children": [
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "SELECT * FROM \"mapset_caches\" WHERE (\"mapset_id\" = ?) LIMIT ?"
                    },
                    "analyzed_query": {
                      "actions": [
                        "select"
                      ],
                      "tables": [
                        "mapset_caches"
                      ],
                      "columns": [
                        "*",
                        "mapset_id"
                      ],
                      "joinCount": 0
                    }
                  },
                  {
                    "kind": "function",
                    "function": "json/JSON::Ext::Parser#parse",
                    "labels": [
                      "serialization",
                      "json"
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "json/JSON::Ext::Parser#parse",
                    "labels": [
                      "serialization",
                      "json"
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "json/JSON::Ext::Parser#parse",
                    "labels": [
                      "serialization",
                      "json"
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "json/JSON::Ext::Parser#parse",
                    "labels": [
                      "serialization",
                      "json"
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "json/JSON::Ext::Parser#parse",
                    "labels": [
                      "serialization",
                      "json"
                    ]
                  },
                  {
                    "kind": "sql",
                    "sql": {
                      "normalized_query": "SELECT mapset_digest(?) AS \"digest\" LIMIT ?"
                    },
                    "analyzed_query": {
                      "actions": [
                        "select"
                      ],
                      "tables": [],
                      "columns": [],
                      "joinCount": 0
                    }
                  },
                  {
                    "kind": "function",
                    "function": "app/models/WebResources.dehydrate",
                    "labels": []
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/WebResources#any?",
                "labels": []
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#data_model",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/DataModel.dehydrate",
                    "labels": []
                  }
                ]
              },
              {
                "kind": "function",
                "function": "action_view/ActionView::Renderer#render",
                "labels": [
                  "view"
                ],
                "children": [
                  {
                    "kind": "function",
                    "function": "action_view/ActionView::Renderer#render",
                    "labels": [
                      "view"
                    ],
                    "children": [
                      {
                        "kind": "function",
                        "function": "action_view/ActionView::Renderer#render",
                        "labels": [
                          "view"
                        ]
                      },
                      {
                        "kind": "function",
                        "function": "action_view/ActionView::Renderer#render",
                        "labels": [
                          "view"
                        ]
                      },
                      {
                        "kind": "function",
                        "function": "action_view/ActionView::Renderer#render",
                        "labels": [
                          "view"
                        ]
                      },
                      {
                        "kind": "function",
                        "function": "action_view/ActionView::Renderer#render",
                        "labels": [
                          "view"
                        ]
                      },
                      {
                        "kind": "function",
                        "function": "action_view/ActionView::Renderer#render",
                        "labels": [
                          "view"
                        ]
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "action_view/ActionView::Renderer#render",
                    "labels": [
                      "view"
                    ]
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#data_model",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/DataModel.dehydrate",
                    "labels": []
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#web_resources",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/WebResources.dehydrate",
                    "labels": []
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/WebResources#any?",
                "labels": []
              },
              {
                "kind": "function",
                "function": "app/helpers/ApplicationPathHelper#application_path",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/App::Show#org",
                    "labels": []
                  }
                ]
              },
              {
                "kind": "function",
                "function": "action_view/ActionView::Renderer#render",
                "labels": [
                  "view"
                ],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/controllers/CurrentUser#current_user",
                    "labels": []
                  },
                  {
                    "kind": "function",
                    "function": "app/models/App::Show#managed_by?",
                    "labels": [],
                    "children": [
                      {
                        "kind": "sql",
                        "sql": {
                          "normalized_query": "SELECT * FROM \"users\" WHERE \"id\" = ?"
                        },
                        "analyzed_query": {
                          "actions": [
                            "select"
                          ],
                          "tables": [
                            "users"
                          ],
                          "columns": [
                            "*",
                            "id"
                          ],
                          "joinCount": 0
                        }
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "app/models/Mapset::Show#recording_method_counts",
                    "labels": []
                  },
                  {
                    "kind": "function",
                    "function": "app/models/Mapset::Show#recording_method_counts",
                    "labels": []
                  },
                  {
                    "kind": "function",
                    "function": "app/models/Mapset::Show#recording_method_counts",
                    "labels": []
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/helpers/ApplicationPathHelper#application_path",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/App::Show#org",
                    "labels": []
                  }
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#code_object_counts",
                "labels": []
              },
              {
                "kind": "function",
                "function": "action_view/ActionView::Renderer#render",
                "labels": [
                  "view"
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#key_stats_counts",
                "labels": []
              },
              {
                "kind": "function",
                "function": "action_view/ActionView::Renderer#render",
                "labels": [
                  "view"
                ]
              },
              {
                "kind": "function",
                "function": "app/helpers/ApplicationPathHelper#application_path",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/App::Show#org",
                    "labels": []
                  }
                ]
              },
              {
                "kind": "function",
                "function": "action_view/ActionView::Renderer#render",
                "labels": [
                  "view"
                ]
              },
              {
                "kind": "function",
                "function": "action_view/ActionView::Renderer#render",
                "labels": [
                  "view"
                ]
              },
              {
                "kind": "function",
                "function": "action_view/ActionView::Renderer#render",
                "labels": [
                  "view"
                ]
              },
              {
                "kind": "function",
                "function": "action_view/ActionView::Renderer#render",
                "labels": [
                  "view"
                ]
              },
              {
                "kind": "function",
                "function": "app/models/Mapset::Show#data_model",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/models/DataModel.dehydrate",
                    "labels": []
                  }
                ]
              },
              {
                "kind": "function",
                "function": "json/JSON::Ext::Generator::State#generate",
                "labels": [
                  "serialization",
                  "json"
                ]
              },
              {
                "kind": "function",
                "function": "lib/appland/Diagram::ComponentDiagram#to_json",
                "labels": [],
                "children": [
                  {
                    "kind": "function",
                    "function": "json/JSON::Ext::Generator::State#generate",
                    "labels": [
                      "serialization",
                      "json"
                    ]
                  }
                ]
              },
              {
                "kind": "function",
                "function": "openssl/Digest::Instance#digest",
                "labels": [
                  "security",
                  "crypto"
                ]
              },
              {
                "kind": "function",
                "function": "json/JSON::Ext::Parser#parse",
                "labels": [
                  "serialization",
                  "json"
                ]
              },
              {
                "kind": "function",
                "function": "action_view/ActionView::Renderer#render",
                "labels": [
                  "view"
                ],
                "children": [
                  {
                    "kind": "function",
                    "function": "action_view/ActionView::Renderer#render",
                    "labels": [
                      "view"
                    ],
                    "children": [
                      {
                        "kind": "function",
                        "function": "openssl/Digest::Instance#digest",
                        "labels": [
                          "security",
                          "crypto"
                        ]
                      },
                      {
                        "kind": "function",
                        "function": "json/JSON::Ext::Parser#parse",
                        "labels": [
                          "serialization",
                          "json"
                        ]
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "action_view/ActionView::Renderer#render",
                    "labels": [
                      "view"
                    ]
                  }
                ]
              },
              {
                "kind": "function",
                "function": "action_view/ActionView::Renderer#render",
                "labels": [
                  "view"
                ],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/helpers/ConfigurationHelper#content_for_feature_flag",
                    "labels": [],
                    "children": [
                      {
                        "kind": "function",
                        "function": "app/models/Configuration#attributes",
                        "labels": []
                      }
                    ]
                  }
                ]
              },
              {
                "kind": "function",
                "function": "action_view/ActionView::Renderer#render",
                "labels": [
                  "view"
                ],
                "children": [
                  {
                    "kind": "function",
                    "function": "app/helpers/ConfigurationHelper#content_for_feature_flag",
                    "labels": [],
                    "children": [
                      {
                        "kind": "function",
                        "function": "app/models/Configuration#attributes",
                        "labels": []
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "function": "action_view/ActionView::Renderer#render",
                    "labels": [
                      "view"
                    ],
                    "children": [
                      {
                        "kind": "function",
                        "function": "app/helpers/ApplicationPathHelper#application_path",
                        "labels": [],
                        "children": [
                          {
                            "kind": "function",
                            "function": "app/models/App::Show#org",
                            "labels": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
]